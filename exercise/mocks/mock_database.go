// Code generated by MockGen. DO NOT EDIT.
// Source: test/database (interfaces: Idb)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockIdb is a mock of Idb interface.
type MockIdb struct {
	ctrl     *gomock.Controller
	recorder *MockIdbMockRecorder
}

// MockIdbMockRecorder is the mock recorder for MockIdb.
type MockIdbMockRecorder struct {
	mock *MockIdb
}

// NewMockIdb creates a new mock instance.
func NewMockIdb(ctrl *gomock.Controller) *MockIdb {
	mock := &MockIdb{ctrl: ctrl}
	mock.recorder = &MockIdbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdb) EXPECT() *MockIdbMockRecorder {
	return m.recorder
}

// DbConnectAndMigrate mocks base method.
func (m *MockIdb) DbConnectAndMigrate() (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DbConnectAndMigrate")
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DbConnectAndMigrate indicates an expected call of DbConnectAndMigrate.
func (mr *MockIdbMockRecorder) DbConnectAndMigrate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DbConnectAndMigrate", reflect.TypeOf((*MockIdb)(nil).DbConnectAndMigrate))
}
